===================================
Managing static files (CSS, images)
===================================

Websites generally need to serve additional files such as images, JavaScript,
or CSS. In Django, we refer to these files as "static files".  Django provides
:mod:`django.contrib.staticfiles` to help you manage them.

This page describes how you can serve these static files.


Configuring static files
========================

1. In your settings file, define :setting:`STATIC_URL`, for example::

   `/static/`.

2. Optionally, in your settings file, define :setting:`STATIC_FILES_DIRS`, for
   example::

    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, "static")
    )

3. In your templates, either hardcode the url like
   ``/static/my_app/myexample.jpg`` or preferably, use the static template tag
   to point to the right url (this makes it much easier when you want to
   switch to for example Amazon for serving static files.

   .. _staticfiles-in-templates:

   .. code-block:: html+django

        {% load staticfiles %}
        <img src="{% static "my_app/myexample.jpg" %}" alt="Sample image"/>

4. Store your static files in a folder called ``static``, either within your
   app or in your :setting:`BASE_DIR`.

For example ``my_app/static/my_app/myimage.jpg``.

Now, if you use ``./manage.py runserver``, all static files should be shown
correctly.

.. note::

    There is also a template tag named :ttag:`static` in Django's core set
    of :ref:`built in template tags<ref-templates-builtins-tags>` which has
    the same argument signature but only uses `urlparse.urljoin()`_ with the
    :setting:`STATIC_URL` setting and the given path. This has the
    disadvantage of not being able to easily switch the storage backend
    without changing the templates, so in doubt use the ``staticfiles``
    :ttag:`static<staticfiles-static>`
    template tag.

.. _`urlparse.urljoin()`: http://docs.python.org/library/urlparse.html#urlparse.urljoin

For complete details on all the settings, commands, template tags, and other
pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the staticfiles
reference </ref/contrib/staticfiles>`.


Serving files uploaded by a user
================================

During development, you can serve user-uploaded media files from
:setting:`MEDIA_ROOT`.  using, the :func:`~django.views.static.serve`
view. For clarity, this is not suitable for production use. For some common
deployment strategies, see :doc:`/howto/static-files-in-production`.

For example, if your :setting:`MEDIA_URL` is defined as '/media/', you can do
this by adding the following snippet to your urls.py::

    from django.conf import settings

    # ... the rest of your definitions go here ...

    if settings.DEBUG:
        urlpatterns += patterns('',
            url(r'^media/(?P<path>.*)$', 'django.views.static.serve', {
                'document_root': settings.MEDIA_ROOT,
            }),
       )

Or use the following snippet::

    from django.conf import settings
    from django.conf.urls.static import static

    urlpatterns = patterns('',
        # ... the rest of your URLconf goes here ...
    ) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

.. note::

    This helper function works only in debug mode and only if
    the given prefix is local (e.g. ``/static/``) and not a URL (e.g.
    ``http://static.example.com/``).

Deployment
==========

:mod:`django.contrib.staticfiles` provides convenience functions for gathering
static files in a single directory so you can serve them easily.

1. Set the :setting:`STATIC_ROOT` setting to point to the directory from which
   you'd like to serve these files, for example::

       STATIC_ROOT = "/var/www/example.com/static/"

2. Run the :djadmin:`collectstatic` management command::

       ./manage.py collectstatic

   This will copy all files in your static folders and copy them into the
   directory defined by :setting:`STATIC_ROOT`.

3. Use a webserver of your choice to serve the files.

   :doc:`/howto/static-files-in-production` covers some common deployment
   strategies for static files.


Learn more
==========

This document has covered the basics and some common usage patterns. For
complete details on all the settings, commands, template tags, and other pieces
include in :mod:`django.contrib.staticfiles`, see :doc:`the staticfiles reference
</ref/contrib/staticfiles>`.
